package algorithm.chapter4;

public class Chapter4_6 {

	/*
	 * 4.6수행 시간 어림짐작하기
	 * -> 입력 크기에 따라 시간복잡도 O표기에 대입하는건 주먹구구식
	 *  1. O표기법으로 시간 복잡도를 표현할 때는 상수, 최고차항 이외의 값은 제외하기 때문.
	 *  2. 반복문 내부 로직이 복잡한 경우 또는 간단한 경우
	 *  3. 메모리 사용 패턴이 복잡한 경우 - 메모리에서 매번 가져오냐, 캐시에서 쓰냐에 따라 다름
	 *  4. 언어와 컴파일러 차이
	 *  5. 구형 컴퓨터 사용
	 *  
	 *  완전탐색 N2
	 *  분할정복 알고리즘 NlogN
	 *  동적 계획법 N
	 *  -> 입력갯수에 특정지점에 따라 running time 증가
	 *  
	 *  
	 *  4.7 계산복잡도 P, NP, NP-완비
	 *  P -다항시간 알고리즘이 존재하는 문제, 다항 시간에 풀수 있는 문제. 다룰 수 있는 시간 내에서 해결가능한 문제 
	 *  NP - 답이 주어졌을 때 이것이 정답인지를 다항 시간 내에 확인할 수 있는 문제
	 *  
	 *  NP-완비 : NP - 난해 문제이면서 NP인 문제들을 
	 *  
	 * 
	 */
}
