package effectivejava.chapter8.item56;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.Objects;

/**
 * 공개된 API 요소에는 항상 문서화 주석을 작성하라.
 * @author 박민영
 *
 */
public class Item56Main {
	/*
	 * API를 올바로 문서화 하려면 공개된 모든 클래스, 인터페이스, 메서드, 필드 선언에 문서화 주석을 달아야 한다.
	 * 직렬화 할 수 있는 클래스라면 직렬화 형태에 관해서도 적어야 한다.
	 * 기본생성자에는 문서화 주석을 달 방법이 없으니 공개 클래스는 절대 기본생성자를 사용하면 안된다.
	 * 
	 * 메서드용 문서화 주석에는 해당 메서드와 클라이언트 사이의 규약을 명료하게 기술해야 한다.
	 * 상속용으로 설계된 클래스의 메서드가 아니라면 (그 메서드가 어떻게 동작하는지가 아니라) 무엇을 하는지를 기술해야 한다.
	 * 즉, how가 아닌 what을 기술해야 한다.
	 * 문서화 주석에는 클라이언트가 해당 메서드를 호출하기 위한 전제조건을 모두 나열해야 한다.
	 * 또한 메서드가 성공적으로 수행된 후에 만족해야 하는 사후조건도 모두 나열해야 한다.
	 * 일반적으로 전제조건은 @throws 태스로 비검사 예외를 선언하여 암시적으로 기술해야 한다.
	 * @param 태그를 이용해 조건에 영향받는 매개변수에 기술할수도 있다.
	 * 
	 * 전제조건, 사후조건뿐만 아니라 부작용도 문서화 해야한다.
	 * 부작용이란 사후조건으로 명확히 나타나지는 않지만 시스템의 상태에 어떠한 변화를 가져오는는 것을 뜻한다.
	 * 예) 백그라운드 스레드를 시작시키는 메서드
	 * 
	 * 메서드의 계약을 완벽히 기술하려면 모든 매개변수에 @param태그를,
	 * 반환 타입이 void가 아니라면 @return태그를,
	 * 발생할 가능성이 있는 모든 예외에 @throws태그를 달아야 한다.
	 * @return태그의 설명이 메서드 설명과 같을 경우, 생략 가능하다.
	 * 
	 * */
	
	
	/**
	 * 이 리스트에서 지정한 위치의 원소를 반환한다.
	 * 
	 * <p>이 메서드는 상수 시간에 수행됨을 보장하지 <i>않는다</i>. 구현에 따라 원소의 비례해 시간이 걸릴 수도 있다.</p>
	 * @param index 반환할 원소의 인덱스; 0 이상이고 리스트 크기보다 작아야 한다.
	 * @return 이 리스트에서 지정한 위치의 원소
	 * @throws IndexOutOfBoundsException index가 범위를 벗어나면, 즉, ({@code index < 0 || index >= this.size()})이면 발생한다.
	 */
	private static <E> E get(int index) {
		return null;
	}
	
	/*
	 * 자바독 유틸리티는 문서화 주석을 HTML로 변환하므로 문서화 주석 안의 HTML 요소들이 최종 HTML 문서에 반영된다.
	 * 드물기는 하지만 자바독 설명에 HTML 표까지 집어넣는 프로그래머도 있다.
	 * 
	 * {@code} 태그에 대해
	 * 1. 태그로 감싼 내용을 코드용 폰트로 랜더링한다.
	 * 2. 태그로 감싼 내용에 포함된 HTML요소나 다른 자바독 태그를 무시한다.
	 * 
	 * 문서화 주석에 쓰인 "this"는 호출된 메서드가 자리하는 객체를 가리킨다.
	 * 
	 * */
	
	
	
	/*
	 * 클래스를 상속용으로 설계할때는 자기사용 패턴에 대해서도 문서에 남겨 다른 프로그래머에게 그 메서드를 올바로 재정의하는 방법을 알려줘야 한다.
	 * @implSpec 주석은 해당 메서드와 하위 클래스 사이의 계약을 설명하여
	 * 하위 클래스들이 그 메서드를 상속하거나 super 키워드를 이용해 호출할 때 그 메서드가 어떻게 동작하는지 명확히 인지하고 사용하도록 해줘야 한다.  
	 * */
	
	/**
	 * 이 컬렉션이 비었다면 ture를 반환한다.
	 * 
	 * @implSpec 이 구현은 {@code this.size() == 0}의 결과를 반환한다.
	 * 
	 * @return 이 컬렉션이 비었다면 true, 그렇지 않다면 false
	 */
	private static boolean isEmpty() {
		return false;
	}
	
	/*
	 * {@literal} 태그는 HTML마크업이나 자바독 태그를 무시하게 해준다.
	 * 앞서 본 {@code}태그와 비슷하지만 코드 폰트로 랜더링 하지 않는다.
	 * 
	 * */
	
	/**
	 * {@literal |r| <1}이면 기하 수열이 수렴한다.
	 */
	private static void test() {
		
	}
	
	
	/*
	 * 각 문서화 주석의 첫번째 문장은 해당 요소의 요악설명으로 간주된다.
	 * 한 클래스(혹은 인터페이스)안에서 요약설명이 똑같은 멤버(혹은 생성자)가 둘 이상이면 안된다.
	 * 다중정의된 메서드가 있다면 특히 더 조심하자.
	 * 
	 * 요약설명에서 마침표에 주의하자. 요약설명이 끝나다고 판단되기 때문
	 * 해결책은 {@literal}로 감싸주는것이다.
	 * 
	 * java10 부터는 {@summary} 라는 요약 설명 전용 태그가 추가되었다.
	 * */
	
	/**
	 * 머스터드 대령이나 {@literal Mrs.} 피콕 같은 용의자.
	 *
	 */
	class Suspect{
		
	}
	
	
	/*
	 * 자바9부터는 자바독이 생성한 HTML문서에 검색 기능이 추가되었다.
	 * {@index} 태그를 사용해 색인화 할 수 있다.
	 * 
	 * 제네릭 타입이나 제네릭 메서드를 문서화할 때는 모든 타입 매개변수에 주석을 달아야 한다.
	 * */
	
	/**
	 * @param <K> 이 맵이 관리하는 키의 타입
	 * @param <V> 매핑된 값의 타입
	 */
	interface Map<K, V> {
		
	}
	
	/*
	 * 열거타입을 문서화 할 때는 상수들에도 주석을 달아야 한다.
	 * */
	
	enum OrchestraSection{
		
		/**
		 * 플루트, 클라리넷, 오보 같은 목관악기
		 */
		WOODWIND,
		/**
		 * 프렌치 호른, 트럼펫 같은 금관악기
		 */
		BRASS,
		/**
		 * 탐파니, 심벌즈 같은 타악기
		 */
		PERCUSSION,
		/**
		 * 바이올린, 첼로같은 현악기
		 */
		STRING;
	}
	
	
	
	/*
	 * 애너테이션 타입을 문서화 할 때는 멤버들에도 모두 주석을 달아야 한다. 
	 * 
	 * */
	/**
	 * 이 애너테이션이 달리 메서드는 명시한 예외를 던져야만 성공하는 테스트 메서드임을 나타낸다.
	 *
	 */
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.METHOD)
	@interface ExceptionTest {
		/**
		 * 이 애너테이션을 단 테스트 메서드가 성공하려면 던져야하는 예외.
		 * (이 클래스의 하위 타입 예외는 모두 허용된다)
		 */
		Class<? extends Throwable> value(); 
	}
	
	
	/*
	 * 패키지를 설명하는 문서화 주석은 package-info.java 파일에 작성한다.
	 * 모듈 시스템을 사용한다면 모듈관련 설명은 module-info.java 파일에 작성하면 된다.
	 * 
	 * 클래스 혹은 정적 메서드가 스레드 안전하든 그렇지 않든, 스레드 안전 수준을 반드시 API 설명에 포함해야 한다.(Item 82)
	 * 직렬화 가능하다면 직렬화 형태도 API에 기술해야 한다.(Item 87)
	 * 
	 * 자바독은 메서드 주석을 상속시킬 수 있다.
	 * 문서화 주석이 없는 API요소를 발견하면 자바독이 가장 가까운 문서화 주석을 찾아준다.
	 * 상세한 검색 알고리즘은 "자바독 참조 지침(The Javadoc Reference Guide)" 을 참고
	 * 또한 {@inheritDoc} 태그를 사용해 상위 타입 문서화 주석 일부를 상속할 수 있다.
	 * 
	 * 공개된 모든 API 요소에 문서화 주석을 달았더라도, 이것만으로는 충분하지 않을 때가 있다.
	 * 여러 클래스가 상호작용하는 복잡한 API라면 문서화 주석 외에도 전체 아키텍쳐를 설명하는 별도의 설명이 필요할 때가 있다.
	 * 이런 설명문서가 있다면 관련 클래스나 패키지의 문서화 주석에서 그 문서의 링크를 제공해주면 좋다.
	 * */
	
	
	public static void main(String[] args) {
		/*
		 * 문서화 주석은 여러분 API를 문서화하는 가장 훌륭하고 효과적인 방법이다.
		 * 공개 API라면 빠짐없이 설명을 달아야 한다.
		 * 표준 규약을 일관되게 지키자.
		 * 문서화 주석에 임의의 HTML태그를 사용할 수 있음을 기억하라.
		 * 단, HTML 메타문자는 특별하게 취급해야 한다.
		 * */
		
		get(1);
		isEmpty();
		test();
		
	}

	
}

