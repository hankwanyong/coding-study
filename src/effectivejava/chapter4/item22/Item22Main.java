package effectivejava.chapter4.item22;


public class Item22Main implements PhysicalConstant{

	/*
	 * Item22 인터페이스는 타입을 정의하는 용도로만 사용하라
	 * 
	 * 인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 한다.
	 * 달리말해, 클래스가 어떤 인터페이스를 구현한다는 것은 자신의 인스턴스로 무엇을 할 수 있는지를 클라이언트에 얘기해주는 것이다.
	 * 인터페이스는 오직 이 용도로만 사용해야한다.
	 * 
	 * 이 지침에 맞지 않는 예로 소위 상수 인터페이스라는 것이 있다.
	 * 상수 인터페이스란? 메서드 없이, 상수를 뜻하는 static final 필드로만 가득 찬 인터페이스를 말한다.
	 * 
	 */

	//코드 22-1 상수 인터페이스 안티 패턴 - 사용금지!
//	PhysicalConstant;
   //클래스 내부에 구현된 상수는 내부 구현이다.그러나 이렇게 상수 인터페이스는 내부 구현을 외부로 노출하는 행위이기 때문에 의미가 없다.

	public static void main(String[] args){ 
		System.out.print(PhysicalConstant.AVOGADROS_NUMBER); 
		
		//외부에서 상수 인터페이스의 내부를 적나라게 볼 수 있으며, 이는 내부구현이라 할 수 없기 때문이다.
		
		/*
		 * 상수를 공개하고 싶다면 이러한 상수 인터페이스가 아닌 다른 좋은 방법들이 있다.
		 * 1. 특정 클래스나 인터페이스와 강하게 연관된 상수라면 그 클래스나 인터페이스 자체에 추가 해야한다. (ex Interger나 Double에 MIN_VALUE, MAX_VALUE)
		 * 2. 열거타입으로 나타내기 적합한 상수라면 열거 타입으로 만들어 공개하면 된다.
		 * 3. 인스턴스화할 수 없는 유틸리티 클래스에 담아 공개하자.
		 */

		//코드 22-2 상수 유틸리티 클래스
//		PhysicalConstants;
		//같은 상수 유틸리트 클래스를 통해 클래스로 구현시키고
		//외부에서는 import 시켜 클래스 명까지 함께 명시하여 상수를 사용한다.
		System.out.print("외부에서는 import 시켜 클래스 명까지 함께 명시하여 상수를 사용한다.");
		System.out.print(PhysicalConstants.AVOGADROS_NUMBER);

		//코드 22-3 정적 임포트를 사용해 상수 이름만으로 사용하기
//		Test;
// 또는 정적 임포트를 시켜 클래스 이름을 생략하여 사용할 수 있다.
		//PhysicalConstants를 빈번히 사용한다면 정적 임포트가 값어치를 한다.
		
		/*
		 * 핵심 정리
		 * - 인터페이스는 타입을 정의하는 용도로만 사용해야한다.
		 *   상수 공개용 수단으로 사용하지 말자.
		 */


	} 
	
	
	
	
}
