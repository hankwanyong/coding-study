package effectivejava.chapter7.item47;

public class Item47Main {

	/*
	 * Item 47 반환 타입으로는 스트림보다 컬렉션이 낫다.
	 * 
	 * 자바7까지는 반환하는 원소 시퀀스의 타입으로 Collection 인터페이스, Iterable 인터페이스, 배열 등을 사용했다. 
	 * 자바8부터는 여기에 스트림 인터페이스도 추가되었다. 스트림은 반복을 지원하지 않는다. 
	 * 우회적인 방법을 통해 Iterable을 이용하여 반복할 순 있으나 코드가 난잡해지고 직관성이 떨어진다.
	 * 마찬가지로 Iterable 역시 stream을 지원하지 않는다. 우회적으로 구현은 할 수 있으나 코드가 난잡해지고 직관성이 떨어진다.
	 * 이런 것들을 모두 고려했을때, 반환타입은 Collection 인터페이스로 하는 것이 가장 좋다. Iterable, Stream 을 모두 지원하기 때문이다.
	 * 원소 시퀀스가 매우 많은 컬렉션을 반환하는 것은 위험하다. 이런 경우에는 전용 컬렉션을 구현하는 편이 낫다. (ex. 멱집합, 부분리스트)
	 * 
	 */
	
	
	/*
	 * 핵심정리
	 * 원소 시퀀스를 반환하는 메서드를 작성할 때는, 
	 * 이를 스트림으로 처리하기를 원하는 사용자와 반복으로 처리하기를 원하는 사용자가 모두 있을 수 있음을 떠올리고, 양쪽을 다 만족시키려 노력하자.
	 * 컬렉션을 반환할 수 있자면 그렇게 하라.
	 * 반환 전부터 이미 원소들을 컬렉션에 담아 관리하고 있거나 컬렉션을 하나 더 만들어도 될 정도로 원소 개수가 적다면 ArrayList같은 표준 컬렉션에 담아 반환하라.
	 * 그렇지않으면 앞서의 멱집합 예처럼 전용 컬렉션을 구현할지 고민하라.
	 * 컬렉션을 반환하는 게 불가능하면 스트림과 Iterable 중 더 자연스러운 것을 반환하라.
	 * 만약 나중에 Stream 인터페이스가 Iterable을 지원하도록 자바가 수정된다면, 그때는 안심하고 스트림을 반환하면 될 것이다.
	 * (스트림 처리와 반복 모두에 사용할 수 있으니).
	 */
}
