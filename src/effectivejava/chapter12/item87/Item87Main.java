package effectivejava.chapter12.item87;

public class Item87Main {

	/*
	 * 아이템 87 커스텀 직렬화 형태를 고려해보라.
	 * 
	 *  - 먼저 고민해보고 괜찮다고 판단될 때만 기본 직렬화 형태를 사용하라. 
	 *    유연성, 성능, 정확성 측면에서 신중히 고민할 후 합당할 때만 사용해야 한다.
	 *  
	 *  - 객체의 물리적 표현과 논리적 내용이 같다면 기본 직렬화 형태라도 무방하다.
	 *  코드 87-1 기본 직렬화 형태에 적합한 후보 -> Name 클래스
	 *  코드 87-2 기본 직렬화 형태에 적합하지 않은 클래스 -> StringList 클래스
	 *  
	 *  - 객체의 물리적 표현과 논리적 표현의 차이가 클 때, 기본 직렬화 형태를 사용하면 다음의 문제가 생긴다.
	 *    공개 API 가 현재의 내부 표현 방식에 영구히 묶인다.
	 *    너무 많은 공간을 차지할 수 있다.
	 *    시간이 너무 많이 걸릴 수 있다.
	 *    스택 오버플로를 일으킬 수 있다.
	 *  코드 87-3 합리적인 커스텀 직렬화 형태를 갖춘 StringList -> StringList2 클래스
	 *    
	 *  - 따라서 위의 경우에는 객체를 적절히 설명하는 커스텀 직렬화 형태를 고안하라.
	 * 
	 */	
	 
	 /**
	  * 핵심 정리
	  * 클래스를 직렬화하기로 했다면(아이템 86) 어떤 직렬화 형태를 사용할지 심사숙고하기 바란다.
	  * 자바의 기본 직렬화 형태는 객체를 직렬화한 결과가 해당 객체의 논리적 표현에 부합할때만 사용하고,
	  * 그렇지 않으면 객체를 적절히 설명하는 커스텀 직렬화 형태를 고안하라.
	  * 직렬화 형태도 공개 메서드(아이템 51)를 설계할 때에 준하는 시간을 들여 설계해야한다.
	  * 한번 공개된 메서드는 향후 릴리스에서 제거할 수 없듯이, 직렬화 형태에 포함된 필드도 마음대로 제거할 수 없다.
	  * 직렬화 호환성을 유지하기 위해 영원히 지원해야하는 것이다.
	  * 잘못된 직렬화 형태를 선택하면 해당 클래스의 복잡성과 성능에 영구히 부정적인 영향을 남긴다.
	  */
	

}
