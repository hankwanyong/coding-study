package effectivejava.chapter9.item65;

public class Item65Main {

	/*
	 * 아이템 65 리플렉션보다는 인터페이스를 사용하라.
	 * 
	 * 리플렉션 기능을 이용하면 프로그램에서 임의의 클래스에 접근할 수 있다.
	 * 
	 * Class 객체가 주어지면 그 클래스의 Constructor, Method, Field 인스턴스를 가져올 수 있고 이 인스턴스를 통해 그 클래스의 멤버이름, 필드타입, 메소드 시그니처 등을 가져올 수 있다. 또한 조작도 가능하다.
	 * 
	 * 리플렉션을 이용하면 컴파일 당시에 존재하지 않던 클래스도 이용할 수 있다.
	 * 
	 * 리플렉션의 단점은 다음과 같다.
	 *  - 컴파일타임 타입 검사가 주는 이점을 하나도 누릴 수 없다.
	 *  - 코드가 지저분하고 장황해진다.
	 *  - 성능이 떨어진다.
	 *  
	 *  리플렉션은 아주 제한된 형태로만 사용해야 그 단점을 피하고 이점만 취할 수 있다.
	 * 
	 * 
	 * 핵심정리 
	 *  리플렉션은 복잡한 특수 시스템을 개발할 때 필요한 강력한 기능이지만, 단점도 많다.
	 *  컴파일타임에서는 알 수 없는 클래스를 사용하는 프로그램을 작성한다면 리플렉션을 사용해야 할 것 이다.
	 *  단, 되도록 객체 생성에만 사용하고, 생성한 객체를 이용할 때는 적절한 인터페이스나 컴파일타임에 알 수 있는 상위 클래스로 형변환 해 사용해야한다.
	 */


}
