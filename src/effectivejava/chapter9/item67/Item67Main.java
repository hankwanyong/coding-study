package effectivejava.chapter9.item67;

public class Item67Main {

	/*
	 * 아이템 67 최적화는 신중히 하라.
	 * 
	 * 최적화 격언 3개
	 *  - (맹목적인 어리석음을 포함해) 그 어떤 핑계보다 효율성이라는 이름 아래 행해진 컴퓨팅 죄악이 더 많다. (심지어 효율을 높이지도 못하면서) : 윌리엄 울프
	 *  - (전체의 97% 정도인) 자그마한 효율성은 모두 잊자. 섣부른 최적화가 만악의 근원이다. : 도널드 크누스
	 *  - 최적화 할 때는 다음의 두 규칙을 따르라.
	 *    첫 번째, 하지마라
	 *    두 번째, (전문가 한정) 아직 하지 마라. 다시 말해, 완전히 명백하고 최적화되지 않은 해법을 찾을 때까지는하지마라 : M. A. 잭슨
	 *    + p.379 에서 하나를 더 추가하자면 "각각의 최적화 시도 전후로 성능을 측정하라" 정도가 되겠다.
	 *    
	 * 
	 * 최적화는 좋은 결과보다는 해로운 결과로 이어지기 쉽다. 
	 * 최적화를 하여 성능을 높이기 위해 견고한 구조를 희생하면 오히려 성능이 저하될 수 있다. 
	 * 또한 빠른 프로그램보다는 좋은 프로그램을 작성하는 것이 좋다. 
	 * 좋은 프로그램은 정보 은닉 원칙을 따르므로 개별 구성요소의 내부를 독립적으로 설계할 수 있다. 
	 * 따라서 시스템의 나머지에 영향을 주지 않고도 각 요소를 다시 설계할 수 있다.
	 * 구현 상의 문제는 나중에 해결할 수 있지만, 구조 상의 문제는 재구축하지 않고서는 해결이 불가능할 수 있기 때문이다. 
	 * 그리고 좋은 프로그램이 일반적으로 성능도 좋다.
	 * 
	 * API 를 설계할 때 성능에 주는 영향을 고려하라.
	 * 잘 설계된 API는 성능도 좋은게 보통이다. 성능을 위해 API 를 왜곡하는 것은 좋지 않다.
	 * API를 왜곡하도록 만든 그 성능 문제는 당장은 사라질 수도 있지만, 왜곡된 API와 이를 지원하는 데 따르는 고통은 영원히 계속될 것이다.
	 * 
	 * 
	 * 핵심정리
	 *  빠른 프로그램을 작성하려 안달하지 말자.
	 *  좋은 프로그램을 작성하다 보면 성능은 따라오기 마련이다.
	 *  하지만 시스템을 설계할 때, 특히 API, 네트워크 프로토콜, 영구 저장용 데이터 포맷을 설계할 때는 성능을 염두에 두어야 한다.
	 *  시스템 구현을 완료했다면 이제 성능을 측정해보라. 충분히 빠르면 그것을 끝이다.
	 *  그렇지 않다면 프로파일러를 사용해 문제의 원인이 되는 지점을 찾아 최적화를 수행하라.
	 *  가장 먼저 어떤 알고리즘을 사용했는지를 살펴보자.
	 *  알고리즘을 잘못 골랐다면 다른 저수준 최적화는 아무리 해봐야 소용이 없다.
	 *  만족할 때까지 이 과정을 반복하고, 모든 변경 후에는 성능을 측정하라.
	 */


}
