package effectivejava.chapter6.item41;

/**
 * 정의하려는 것이 타입이라면 마커 인터페이스를 사용하라
 * @author 박민영
 *
 */
public class Item41Main{
	/*
	 * 마커 인터페이스란 : 아무 메서드도 담고있지 않고, 단지 자신을 구현하는 클래스가 특정 속성을 가짐을 표시해주는 인터페이스(예 : Serializable)
	 * Serializable은 자신을 구현한 클래스의 인스턴스는 ObjectOutputStream 을 통해 쓸(write) 수 있다고 직렬화(serialrization) 할 수 있다고 알려준다. 
	 */
	public static void main(String[] args) {
		
		/*
		 * 마커 인터페이스가 마커 애너테이션보다 좋은점
		 * 1. 마커 인터페이스는 이를 구현한 클래스의 인스턴스를 구분하는 타입으로 쓸 수 있으나, 마커 애너테이션은 그렇지 않다.
		 * 2. 적용대상을 더 정밀하게 지정할 수 있다.
		 * 
		 * 마커 애너테이션이 마커 인터페이스보다 좋은점
		 * 1. 마커 거대한 애너테이션 시스템의 지원을 받는다.
		 * 
		 * 
		 * 마커 인터페이스와 마커 애너테이션은 각자 쓰임이 있다.
		 * 새로 추가하는 메서드 없이 단지 타입 정의가 목적이라면 마커 인터페이스를 선택하자.
		 * 클래스나 인터페이스 외의 프로그램 요소에 마킹해야하거나, 애너테이션을 적극 활용하는 프레임워크의 일부로 그 마커를 편입시키고자 한다면 마커 애너테이션이 올바른 선택이다.
		 * 적용 대상이 ElementType.TYPE인 마커 애너테이션을 작성하고 있다면, 잠시 여유를 갖고 정말 애너테이션으로 구현하는게 옳은지, 혹은 마커 인터페이스가 낫지는 않을지 곰곰히 생각 해 보자.
		 */
	}
}
